name: Benchmarks

on:
  workflow_dispatch: {}   # manual execution only from GitHub

permissions:
  contents: write  # necessary to push changes

jobs:
  run-benchmarks:
    runs-on: ubuntu-latest

    env:
      OMP_NUM_THREADS: "1"         # Force OpenMP-based libraries to run single-threaded (e.g., NumPy, scikit-learn, LightGBM) to reduce variance and avoid oversubscription.
      OPENBLAS_NUM_THREADS: "1"    # Limit OpenBLAS (BLAS/LAPACK backend) to 1 thread for deterministic, stable timings.
      MKL_NUM_THREADS: "1"         # Limit Intel MKL to 1 thread; many NumPy wheels use MKL on CI.
      NUMEXPR_NUM_THREADS: "1"     # Restrict numexpr parallelism (used by pandas/NumPy for vectorized expressions) to 1 thread.
      VECLIB_MAXIMUM_THREADS: "1"  # Cap Apple's Accelerate/vecLib threads to 1; no effect on Linux, harmless to keep for portability.
      PYTHONWARNINGS: "ignore"     # Silence Python warnings so benchmark logs are clean; switch to "default" if you want to see warnings.
      KERAS_BACKEND: torch         # Use PyTorch as the backend for Keras.

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0            # fetch all history for committing
          persist-credentials: true # use GITHUB_TOKEN for push

      - name: Show runner context (verbose)
        shell: bash
        run: |
          echo ">> Repository: $GITHUB_REPOSITORY"
          echo ">> Default branch: $GITHUB_REF_NAME"
          echo ">> Commit SHA: ${GITHUB_SHA}"
          echo ">> Run number: ${GITHUB_RUN_NUMBER}"
          echo ">> Actor: ${GITHUB_ACTOR}"
          echo ">> Runner OS: $RUNNER_OS"
          echo ">> Working directory:"
          pwd
          echo ">> Git status (before changes):"
          git status --porcelain || true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Python dependencies (verbose)
        shell: bash
        run: |
          set -e
          echo ">> Upgrading pip..."
          python -m pip install --upgrade pip
          echo ">> Installing benchmark requirements..."
          pip install -r benchmarks/requirements_benchmarks.txt
          echo ">> Installing project..."
          pip install skforecast==0.15.1


      - name: Show environment info
        shell: bash
        run: |
          echo ">> Python environment summary:"
          python --version
          python -m pip list | sed -n '1,120p'  # Truncate long lists for readability
          
      - name: Sanity check paths (verbose)
        shell: bash
        run: |
          echo ">> Listing repo root:"
          ls -la
          echo ">> Listing benchmarks directory (if present):"
          ls -la benchmarks || echo "No 'benchmarks' directory yet."
          echo ">> Expected output file: benchmarks/benchmark.joblib"
        
      - name: Run benchmarks
        shell: bash
        run: |
          set -e
          echo ">> Running benchmark script..."
          # Ensure your script writes to benchmarks/benchmark.joblib
          python benchmarks/run_benchmarks.py
          echo ">> Benchmark script finished with exit code $?"
          echo ">> Listing benchmarks directory after run:"
          ls -lh benchmarks || true
          if [ -f benchmarks/benchmark.joblib ]; then
            echo ">> Found output: benchmarks/benchmark.joblib"
          else
            echo "!! No output file produced at benchmarks/benchmark.joblib"
          fi
    
      - name: Commit & push updated joblib
        if: always()
        shell: bash
        run: |
          set -e
          echo ">> Preparing to commit benchmarks/benchmark.joblib (if changed)..."

          if [ ! -f benchmarks/benchmark.joblib ]; then
            echo "!! benchmarks/benchmark.joblib not found. Skipping commit."
            exit 0
          fi

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          echo ">> Git status before staging:"
          git status --porcelain || true

          # Stage new or changed file (covers untracked and modified cases)
          git add -A benchmarks/benchmark.joblib

          # If there is any diff in the staged file, commit and push
          if git diff --cached --quiet -- benchmarks/benchmark.joblib; then
            echo ">> No changes detected in benchmarks/benchmark.joblib. Skipping commit."
          else
            echo ">> Changes detected. Committing..."
            git commit -m "benchmarks: update benchmark.joblib (run ${GITHUB_RUN_NUMBER} @ ${GITHUB_SHA::7})"
            echo ">> Pushing commit..."
            git push
            echo ">> Push completed."
          fi

          echo ">> Git status after potential commit:"
          git status --porcelain || true

      - name: Job summary (human-friendly)
        if: always()
        shell: bash
        run: |
          {
            echo "## Benchmarks workflow summary"
            echo ""
            echo "- **Repo:** \`${GITHUB_REPOSITORY}\`"
            echo "- **Branch/Ref:** \`${GITHUB_REF_NAME}\`"
            echo "- **Commit:** \`${GITHUB_SHA}\`"
            echo "- **Run number:** \`${GITHUB_RUN_NUMBER}\`"
            echo ""
            if [ -f benchmarks/benchmark.joblib ]; then
              echo "### Output file"
              echo "- Generated: \`benchmarks/benchmark.joblib\`"
            else
              echo "### Output file"
              echo "- ‚ùå Not produced (check logs above)."
            fi
            echo ""
            echo "### Next steps"
            echo "- If this was the first run, the job attempted to create and commit the new joblib."
            echo "- Subsequent runs will append entries and commit only when changes are detected."
          } | tee -a "$GITHUB_STEP_SUMMARY"
